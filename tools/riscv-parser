#!/usr/bin/env python3

import argparse
import os
import sys
from io import StringIO

from xdsl.ir import MLContext
from xdsl.dialects.builtin import Builtin, ModuleOp
from xdsl.printer import Printer

from xdslriscv.dialects.riscv import RISCV
from xdslriscv.parser import Parser as RVParser
from xdslriscv.printer import print_program

from typing import Dict, Callable, List


class Main:
    ctx: MLContext
    args: argparse.Namespace

    def __init__(self, args: argparse.Namespace):
        self.ctx = MLContext()
        self.args = args
        self.register_all_dialects()

    def register_all_dialects(self):
        """Register all dialects that can be used."""
        riscv = RISCV(self.ctx)

    def parse_frontend(self) -> ModuleOp:
        """Parse the input file."""
        if self.args.input_file is None:
            f = sys.stdin
            file_extension = '.s'
        else:
            f = open(args.input_file, mode='r')
            _, file_extension = os.path.splitext(args.input_file)

        if file_extension == '.s':
            parser = RVParser(f)
            module = parser.parse()
            module.verify()
            if not isinstance(module, ModuleOp):
                raise Exception("Expected module as toplevel operation")
            return module

        raise Exception(f"Unrecognized file extension '{file_extension}'")

    def output_resulting_program(self, prog: ModuleOp) -> str:
        """Get the resulting program."""
        output = StringIO()
        if self.args.format == 'xdsl':
            printer = Printer(stream=output)
            printer.print_op(prog)
        else:
            print_program(prog, output)
        return output.getvalue()

    def print_to_output_stream(self, contents: str):
        """Print the contents in the expected stream."""
        if self.args.output_file is None:
            print(contents)
        else:
            output_stream = open(self.args.output_file, 'w')
            output_stream.write(contents)


arg_parser = argparse.ArgumentParser(description='Metamorph optimizer')
arg_parser.add_argument("input_file",
                        type=str,
                        nargs="?",
                        help="Path to input file")
arg_parser.add_argument("-o",
                        "--output-file",
                        type=str,
                        required=False,
                        help="path to output file")
arg_parser.add_argument('--format', choices=['asm', 'xdsl'], default='asm')


def __main__(args: argparse.Namespace):
    main = Main(args)
    module = main.parse_frontend()
    contents = main.output_resulting_program(module)
    main.print_to_output_stream(contents)


if __name__ == "__main__":
    args = arg_parser.parse_args()
    __main__(args)
